###XCORE+###
## sudo alias
alias sudo='sudo '

# Extended listing
alias lst='ls --color=auto'
alias ls='ls -hAF --color=auto'
alias lsr='ls -hAlF --color=auto'

# Ensure remove confirmations
alias remove='rm -rfI'

# Rename file
alias rename='mv'

# Human readable df
alias df='df -h'

# Switch user
alias switchuser='su'

# Reload zsh
alias reload='zsh --login'

# Top alias
top() {
	if command -v htop >/dev/null 2>&1; then
		htop
	else
		command top
	fi
}

# All is micro editor
edit() {
	if command -v micro >/dev/null 2>&1; then
		micro "$@"
	else
		nano "$@"
	fi
}

# Paths
alias path='pwd'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../../'
alias home='cd ~/'

# List of USB devices
alias usbdevices='lsusb'

# Environment variables
alias envpath='echo -e ${PATH//:/\\n}'
alias envshell='echo -e ${SHELL//:/\\n}'

# Start calculator with math support
alias bc='bc -l'

# Make mount command output pretty and human readable format
alias mount='mount | column -t'

# Date
alias now='date -u +"%Y-%m-%dT%H:%M:%SZ"'
alias nowtime='date -u +"%T"'
alias nowdate='date -u +"%Y-%m-%d"'
alias nowtz='date -u +"%z"'

# Show open ports
alias ports='netstat -tuln'

# Shortcut for iptables and pass it via sudo
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'

# Mac addresses
alias macs='ip link | awk "/ether/ {print \$2}"'

# Generate digest
alias sha1='openssl sha1'
alias sha256='openssl sha256'
alias sha384='openssl sha384'
alias sha512='openssl sha512'

# Tor & torsocks
alias torstart='sudo systemctl start tor'
alias torstop='sudo systemctl stop tor'
alias torrenew='sudo systemctl reload tor'
alias torsockson='torsocks on'
alias torsocksoff='torsocks off'

torcheck() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: torcheck"
		echo "Check if the current IP is using Tor."
	else
		curl --max-time 10 -s https://check.torproject.org/api/ip | python3 -c "import sys, json; print(json.load(sys.stdin)['IsTor'])"
	fi
}

torip() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: torip"
		echo "Get the current IP using Tor."
	else
		curl --max-time 10 -s https://check.torproject.org/api/ip | python3 -c "import sys, json; print(json.load(sys.stdin)['IP'])"
	fi
}

# Password generator
pass() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: pass [LENGTH]"
		echo "Generate a random password."
		echo "If LENGTH is provided, generate a password of that length."
		echo "Otherwise, generate a password between 50 and 80 characters long."
	elif [[ $1 =~ ^[0-9]+$ ]]; then
		LC_ALL=C tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' < /dev/urandom | head -c "$1" | xargs
	else
		LC_ALL=C tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' < /dev/urandom | head -c "$(shuf -i 50-80 -n 1)" | xargs
	fi
}

# SSH connect by private key
sshk() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: sshk [KEY] [USER@HOST]"
		echo "Connect to a server using SSH with a specified private key."
	elif [ -z "$1" ] || [ -z "$2" ]; then
		echo "Error: Both [KEY] and [USER@HOST] must be provided."
		return 1
	elif [ -r "$HOME/.ssh/$1" ]; then
		ssh -i "$HOME/.ssh/$1" "$2"
	elif [ -r "$1" ]; then
		ssh -i "$1" "$2"
	else
		echo "Error: Key file not found or inaccessible in ~/.ssh or the specified path."
		return 1
	fi
}

# Generate SSH key
sshgen() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: sshgen [KEY] [EMAIL]"
		echo "Generate a new SSH key pair."
		echo "If KEY is provided, use it as the key name."
		echo "Otherwise, use the default key name."
	elif [[ $1 =~ .*/.+ ]]; then
		KEY=$1
	else
		KEY=~/.ssh/$1
	fi
	ssh-keygen -t rsa -b 4096 -f "$KEY" -C "$2"
}

# Add SSH key to server
sshcopy() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: sshcopy [KEY] [USER@HOST]"
		echo "Copy an SSH key to a server."
		echo "If KEY is provided, use it as the key name."
		echo "Otherwise, use the default key name."
	elif [[ $1 =~ .*/.+ ]]; then
		KEY=$1
	else
		KEY=~/.ssh/$1
	fi
	ssh-copy-id -i "$KEY" "$2"
}

# Generate GPG key
alias gpg-gen='gpg --default-new-key-algo rsa4096 --gen-key'
alias gpg-genpass='echo "Passphrase: " && echo pass | gpg --default-new-key-algo rsa4096 --gen-key --passphrase-fd 0 && read -p "Proceed with clearing screen - press any key" && clear && printf "\e[3J"'
# GPG Encrypt
gpg-encrypt() {
	if [[ $# -ne 2 ]]; then
		echo "Usage: gpg-encrypt recipient@example.com /path/to/file"
		return 1
	fi
	local recipient="$1"
	local file_path="$2"
	local filename=$(basename -- "$file_path")
	local output_file="${filename}.gpg"
	gpg --output "$output_file" --encrypt --recipient "$recipient" "$file_path"
	if [[ $? -eq 0 ]]; then
		echo "File encrypted successfully: $output_file"
	else
		echo "Error encrypting the file."
	fi
}
# GPG Decrypt
gpg-decrypt() {
	if [[ $# -ne 1 ]]; then
		echo "Usage: gpg-decrypt /path/to/encrypted-file.gpg"
		return 1
	fi
	local file_path="$1"
	gpg --decrypt "$file_path"
	if [[ $? -eq 0 ]]; then
		echo "File decrypted successfully."
	else
		echo "Error decrypting the file."
	fi
}

# Run Git with specific SSH key
gitk() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: gitk [KEY] [COMMAND]"
		echo "Run a Git command using a specific SSH key."
	elif [ -r "$1" ]; then
		KEY=$1
	else
		KEY=~/.ssh/$1
	fi
	ssh-agent bash -c "ssh-add $KEY; $COMMAND"
}

# OS Version
os() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: os [OPTION]"
		echo "Display OS version information."
		echo "Options:"
		echo "  -i, --id          Display system name"
		echo "  -d, --description Display description"
		echo "  -r, --release     Display release number"
		echo "  -a, --all         Display all information"
	elif [ "$1" = "-i" ]; then
		lsb_release -i | cut -f2-
	elif [ "$1" = "-d" ]; then
		lsb_release -d | cut -f2-
	elif [ "$1" = "-r" ]; then
		lsb_release -r | cut -f2-
	elif [ "$1" = "-a" ]; then
		lsb_release -a | cut -f2-
	else
		lsb_release -d | cut -f2-
	fi
}

# Check SHA256SUM
sha256verify() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: sha256verify [FILE]"
		echo "Verify SHA256 checksum."
		echo "If FILE is provided, verify it."
		echo "Otherwise, verify SHA256SUMS file."
	elif [ -r "$1" ]; then
		sha256sum -c "$1" 2>&1 | awk '/VERIFIED/'
	else
		sha256sum -c SHA256SUMS 2>&1 | awk '/VERIFIED/'
	fi
}

# Check SHA512SUM
sha512verify() {
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		echo "Usage: sha512verify [FILE]"
		echo "Verify SHA512 checksum."
		echo "If FILE is provided, verify it."
		echo "Otherwise, verify SHA512SUMS file."
	elif [ -r "$1" ]; then
		sha512sum -c "$1" 2>&1 | awk '/VERIFIED/'
	else
		sha512sum -c SHA512SUMS 2>&1 | awk '/VERIFIED/'
	fi
}

## Greeting
hello() {
	clear
	echo "\033[1;34mWelcome $USER\n"
	echo "\033[0;34mToday is \033[1;36m$(date "+%c")"
	echo "\033[0;34mYou are working on:"
	echo "\033[1;36m\t$(cat /sys/devices/virtual/dmi/id/sys_vendor) - $(cat /sys/devices/virtual/dmi/id/product_name)"
	echo "\tOS: $(os) / Arch: $(uname -p)\033[0m"
	echo "\033[0;34mYour IP address: \033[1;36m$(hostname -I | awk '{print $1}')\033[0m"
	echo "\033[0m\nEnter â†µ"
	read -t 120
	clear
}

###XCORE-###
